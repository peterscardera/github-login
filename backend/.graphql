input PhotoFilter {
  category: PhotoCategory
  createdBetween: DateRange
  taggedUsers: [ID!]
  searchText: String
}

input DateRange {
  start: DateTime!
  end: DateTime!
}

input DataPage {
  first: Int = 25
  start: Int = 0
}

scalar DateTime

type Photo {
  id: ID!
  name: String!
  url: String!
  description: String
  category: PhotoCategory!
  postedBy: User!
  created: DateTime!
  taggedUsers(sorting: DataSort): [User!]!
}

enum SortablePhotoField {
  name
  description
  category
  created
}

enum SortDirection {
  ASCENDING
  DESCENDING
}

enum PhotoCategories {
  SELFIE
  PORTRAIT
  ACTION
  LANDSCAPE
  GRAPHIC
}

type User {
  gitHubLogin: ID!
  name: String
  avatar: String
  postedPhotos(
    filter: PhotoFilter
    paging: DataPage
    sorting: DataSort
  ): [Photo!]!
  inPhoto(filter: PhotoFilter, paging: DataPage, sorting: DataSort): [Photo!]!
}

type Query {
  totalPhotos: Int!
  allPhotos(filter: PhotoFilter, paging: DataPage, sorting: DataSort): [Photo!]!
  totalUsers: Int!
  allUsers(paging: DataPage, sorting: DataSort): [User!]!
  User(gitHubLogin: ID!): User!
  Photo(id: ID!): Photo!
}

type Mutation {
  postPhotos(
    name: String!
    description: String
    category: PhotoCategories = PORTRAIT
  ): Photo!
}

schema {
  query: Query
  mutation: Mutation
}
