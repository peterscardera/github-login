scalar DateTime

type AuthPayLoad {
  """
  *USED AS A RESPONSE TO THE MUTATION WITH GITHUB CODE TO GET ACCESS TOKEN*
  1. client asks giHub for code using client id and github sends code to OAuth.
  2. client send graphql mutation with code.
  3. API: Requests a GitHub access_token with credentials: client_id, client_secret, and client_code
  Weâ€™ll also return that info to the client. The client will save the token locally and send it back to us with each request
  """
  token: String!
  user: User!
}

type Photo {
  id: ID!
  url: String!
  name: String!
  description: String
  category: PhotoCategory!
  postedBy: User!
  taggedUsers: [User!]!
  created: DateTime!
}

type User {
  githubLogin: ID!
  name: String
  avatar: String
  postedPhotos: [Photo!]!
  inPhotos: [Photo!]!
}

type Query {
  totalPhotos: Int!
  allPhotos: [Photo!]!
  totalUsers: Int!
  allUsers: [User!]!
  me: User
}

type Mutation {
  postPhoto(input: PostPhotoInput!): Photo!
  githubAuth(code: String!): AuthPayLoad!
  addFakeUsers(count: Int = 1): [User!]!
  """
  A mutation to authenticate a fake user
  """
  fakeUserAuth(
    """
    The user's unique GitHub login
    """
    githubLogin: ID!
  ): AuthPayLoad!
}

enum PhotoCategory {
  SELFIE
  PORTRAIT
  ACTION
  LANDSCAPE
  GRAPHIC
}

input PostPhotoInput {
  name: String!
  category: PhotoCategory = PORTRAIT
  description: String
}
